// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles_permissions.sql

package sqlc

import (
	"context"
)

const addPermissionToRole = `-- name: AddPermissionToRole :exec
INSERT INTO role_permissions (
  role_id, permission_id
) VALUES (
  $1, $2
)
`

type AddPermissionToRoleParams struct {
	RoleID       int32
	PermissionID int32
}

func (q *Queries) AddPermissionToRole(ctx context.Context, arg AddPermissionToRoleParams) error {
	_, err := q.db.ExecContext(ctx, addPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const getPermissionsForRole = `-- name: GetPermissionsForRole :many
SELECT p.id, p.name, p.description FROM permissions p
JOIN role_permissions rp ON p.id = rp.permission_id
WHERE rp.role_id = $1
`

func (q *Queries) GetPermissionsForRole(ctx context.Context, roleID int32) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsForRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolesForPermission = `-- name: GetRolesForPermission :many
SELECT r.id, r.name FROM roles r
JOIN role_permissions rp ON r.id = rp.role_id
WHERE rp.permission_id = $1
`

func (q *Queries) GetRolesForPermission(ctx context.Context, permissionID int32) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRolesForPermission, permissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePermissionFromRole = `-- name: RemovePermissionFromRole :exec
DELETE FROM role_permissions
WHERE role_id = $1 AND permission_id = $2
`

type RemovePermissionFromRoleParams struct {
	RoleID       int32
	PermissionID int32
}

func (q *Queries) RemovePermissionFromRole(ctx context.Context, arg RemovePermissionFromRoleParams) error {
	_, err := q.db.ExecContext(ctx, removePermissionFromRole, arg.RoleID, arg.PermissionID)
	return err
}
